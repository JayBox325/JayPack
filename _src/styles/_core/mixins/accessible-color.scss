// Expected:
// $fg as a color that will change
// $bg as a color that will be static and not change
// Optional:
// $level, default 'AA'. 'AAA' also accepted
// $size, default 16. PX expected, EM and REM allowed
// $bold, boolean, default false. Whether or not the font is currently bold
//
@function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false) {
    // Helper: make sure the font size value is acceptable
    $font-size: validate-font-size($size);
    // Helper: With the level, font size, and bold boolean, return the proper target ratio. 3.0, 4.5, or 7.0 results expected
    $ratio: get-ratio($level, $font-size, $bold);
    // Calculate the first contrast ratio of the given pair
    $original-contrast: color-contrast($fg, $bg);
    
    @if $original-contrast >= $ratio {
      // If we pass the ratio already, return the original color
      @return $fg;
    } @else {
      // Doesn't pass. Time to get to work
      // Should the color be lightened or darkened?
      // Helper: Single color input, 'light' or 'dark' as output
      $fg-lod: light-or-dark($fg);
      $bg-lod: light-or-dark($bg);
  
      // Set a "step" value to lighten or darken a color
      // Note: Higher percentage steps means faster compile time, but we might overstep the required threshold too far with something higher than 5%
      $step: 2%;
      
      // Run through some cases where we want to darken, or use a negative step value
      @if $fg-lod == 'light' and $bg-lod == 'light' {
        // Both are light colors, darken the fg (make the step value negative)
        $step: - $step;
      } @else if $fg-lod == 'dark' and $bg-lod == 'light' {
        // bg is light, fg is dark but does not pass, darken more
        $step: - $step;
      }
      // Keeping the rest of the logic here, but our default values do not change, so this logic is not needed
      //@else if $fg-lod == 'light' and $bg-lod == 'dark' {
      //  // bg is dark, fg is light but does not pass, lighten further
      //  $step: $step;
      //} @else if $fg-lod == 'dark' and $bg-lod == 'dark' {
      //  // Both are dark, so lighten the fg
      //  $step: $step;
      //}
      
      // The magic happens here
      // Loop through with a @while statement until the color combination passes our required ratio. Scale the color by our step value until the expression is false
      // This might loop 100 times or more depending on the colors
      @while color-contrast($fg, $bg) < $ratio {
        // Moving the lightness is most effective, but also moving the saturation by a little bit is nice and helps maintain the "power" of the color
        $fg: scale-color($fg, $lightness: $step, $saturation: $step/2);
      }
      @return $fg;
    }
  }